

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Jan 06 21:23:07 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 22/03/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009C                     	;# 
   104     009D                     	;# 
   105     009E                     	;# 
   106     009F                     	;# 
   107     010C                     	;# 
   108     010D                     	;# 
   109     010E                     	;# 
   110     010F                     	;# 
   111     018C                     	;# 
   112     018D                     	;# 
   113     0000                     	;# 
   114     0001                     	;# 
   115     0002                     	;# 
   116     0003                     	;# 
   117     0004                     	;# 
   118     0005                     	;# 
   119     0006                     	;# 
   120     0007                     	;# 
   121     0008                     	;# 
   122     0009                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0013                     	;# 
   134     0014                     	;# 
   135     0015                     	;# 
   136     0015                     	;# 
   137     0016                     	;# 
   138     0017                     	;# 
   139     0018                     	;# 
   140     0019                     	;# 
   141     001A                     	;# 
   142     001B                     	;# 
   143     001B                     	;# 
   144     001C                     	;# 
   145     001D                     	;# 
   146     001E                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     0087                     	;# 
   152     0088                     	;# 
   153     0089                     	;# 
   154     008C                     	;# 
   155     008D                     	;# 
   156     008E                     	;# 
   157     0091                     	;# 
   158     0092                     	;# 
   159     0093                     	;# 
   160     0094                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009C                     	;# 
   164     009D                     	;# 
   165     009E                     	;# 
   166     009F                     	;# 
   167     010C                     	;# 
   168     010D                     	;# 
   169     010E                     	;# 
   170     010F                     	;# 
   171     018C                     	;# 
   172     018D                     	;# 
   173     0008                     _PORTD	set	8
   174     0007                     _PORTC	set	7
   175     0047                     _RD7	set	71
   176     0088                     _TRISD	set	136
   177     0087                     _TRISC	set	135
   178                           
   179                           	psect	cinit
   180     07F3                     start_initialization:	
   181                           ; #config settings
   182                           
   183     07F3                     __initialization:
   184                           
   185                           ; Clear objects allocated to BANK0
   186     07F3  1383               	bcf	3,7	;select IRP bank0
   187     07F4  3020               	movlw	low __pbssBANK0
   188     07F5  0084               	movwf	4
   189     07F6  3033               	movlw	low (__pbssBANK0+19)
   190     07F7  120A  118A  262B  120A  118A  	fcall	clear_ram0
   191     07FC                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194     07FC                     __end_of__initialization:
   195     07FC  0183               	clrf	3
   196     07FD  120A  118A  2EB9   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssBANK0
   199     0020                     __pbssBANK0:
   200     0020                     _num_arr:
   201     0020                     	ds	10
   202     002A                     _sum:
   203     002A                     	ds	2
   204     002C                     _num2:
   205     002C                     	ds	2
   206     002E                     _num1:
   207     002E                     	ds	2
   208     0030                     _minus:
   209     0030                     	ds	1
   210     0031                     _plus:
   211     0031                     	ds	1
   212     0032                     _equal:
   213     0032                     	ds	1
   214                           
   215                           	psect	clrtext
   216     062B                     clear_ram0:	
   217                           ;	Called with FSR containing the base address, and
   218                           ;	W with the last address+1
   219                           
   220     062B  0064               	clrwdt	;clear the watchdog before getting into this loop
   221     062C                     clrloop0:
   222     062C  0180               	clrf	0	;clear RAM location pointed to by FSR
   223     062D  0A84               	incf	4,f	;increment pointer
   224     062E  0604               	xorwf	4,w	;XOR with final address
   225     062F  1903               	btfsc	3,2	;have we reached the end yet?
   226     0630  3400               	retlw	0	;all done for this memory range, return
   227     0631  0604               	xorwf	4,w	;XOR again to restore value
   228     0632  2E2C               	goto	clrloop0	;do the next byte
   229                           
   230                           	psect	cstackCOMMON
   231     0070                     __pcstackCOMMON:
   232     0070                     ?_LCD_PIC_init:
   233     0070                     ?_LCD_command:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0070                     ??_LCD_command:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0070                     ?_LCD_data:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0070                     ??_LCD_data:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ?_main:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?___lwdiv:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ___lwdiv@divisor:	
   252                           ; 2 bytes @ 0x0
   253                           
   254                           
   255                           ; 2 bytes @ 0x0
   256     0070                     	ds	2
   257     0072                     LCD_command@hex:
   258     0072                     LCD_data@hex:	
   259                           ; 1 bytes @ 0x2
   260                           
   261     0072                     ___lwdiv@dividend:	
   262                           ; 1 bytes @ 0x2
   263                           
   264                           
   265                           ; 2 bytes @ 0x2
   266     0072                     	ds	1
   267     0073                     ??_LCD_PIC_init:
   268                           
   269                           ; 1 bytes @ 0x3
   270     0073                     	ds	1
   271     0074                     ??___lwdiv:
   272     0074                     ___lwdiv@quotient:	
   273                           ; 1 bytes @ 0x4
   274                           
   275                           
   276                           ; 2 bytes @ 0x4
   277     0074                     	ds	2
   278     0076                     ___lwdiv@counter:
   279                           
   280                           ; 1 bytes @ 0x6
   281     0076                     	ds	1
   282     0077                     ?___bmul:
   283     0077                     ___bmul@multiplicand:	
   284                           ; 1 bytes @ 0x7
   285                           
   286                           
   287                           ; 1 bytes @ 0x7
   288     0077                     	ds	1
   289     0078                     ??___bmul:
   290     0078                     ___bmul@product:	
   291                           ; 1 bytes @ 0x8
   292                           
   293                           
   294                           ; 1 bytes @ 0x8
   295     0078                     	ds	1
   296     0079                     ___bmul@multiplier:
   297                           
   298                           ; 1 bytes @ 0x9
   299     0079                     	ds	1
   300     007A                     ?_LCD_output:
   301     007A                     LCD_output@n:	
   302                           ; 1 bytes @ 0xA
   303                           
   304                           
   305                           ; 2 bytes @ 0xA
   306     007A                     	ds	2
   307     007C                     ??_LCD_output:
   308                           
   309                           ; 1 bytes @ 0xC
   310     007C                     	ds	2
   311     007E                     ??_main:
   312                           
   313                           	psect	cstackBANK0
   314     0033                     __pcstackBANK0:	
   315                           ; 1 bytes @ 0xE
   316                           
   317     0033                     LCD_output@result:
   318                           
   319                           ; 1 bytes @ 0x0
   320     0033                     	ds	1
   321     0034                     LCD_output@j:
   322                           
   323                           ; 2 bytes @ 0x1
   324     0034                     	ds	2
   325     0036                     LCD_output@i:
   326                           
   327                           ; 1 bytes @ 0x3
   328     0036                     	ds	1
   329                           
   330                           	psect	maintext
   331     06B9                     __pmaintext:	
   332 ;;
   333 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   334 ;;
   335 ;; *************** function _main *****************
   336 ;; Defined at:
   337 ;;		line 36 in file "week4_LCD_num_task.c"
   338 ;; Parameters:    Size  Location     Type
   339 ;;		None
   340 ;; Auto vars:     Size  Location     Type
   341 ;;		None
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : B00/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   351 ;;      Params:         0       0       0       0       0
   352 ;;      Locals:         0       0       0       0       0
   353 ;;      Temps:          0       0       0       0       0
   354 ;;      Totals:         0       0       0       0       0
   355 ;;Total ram usage:        0 bytes
   356 ;; Hardware stack levels required when called: 2
   357 ;; This function calls:
   358 ;;		_LCD_PIC_init
   359 ;;		_LCD_command
   360 ;;		_LCD_data
   361 ;;		_LCD_output
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367     06B9                     _main:	
   368                           ;psect for function _main
   369                           
   370     06B9                     l884:	
   371                           ;incstack = 0
   372                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   373                           
   374                           
   375                           ;week4_LCD_num_task.c: 37:     LCD_PIC_init();
   376     06B9  120A  118A  2785  120A  118A  	fcall	_LCD_PIC_init
   377     06BE                     l886:
   378                           
   379                           ;week4_LCD_num_task.c: 38:     num1 = 123;
   380     06BE  307B               	movlw	123
   381     06BF  1283               	bcf	3,5	;RP0=0, select bank0
   382     06C0  1303               	bcf	3,6	;RP1=0, select bank0
   383     06C1  00AE               	movwf	_num1
   384     06C2  3000               	movlw	0
   385     06C3  00AF               	movwf	_num1+1
   386     06C4                     l888:
   387                           
   388                           ;week4_LCD_num_task.c: 39:     num2 = 234;
   389     06C4  30EA               	movlw	234
   390     06C5  00AC               	movwf	_num2
   391     06C6  3000               	movlw	0
   392     06C7  00AD               	movwf	_num2+1
   393     06C8                     l890:
   394                           
   395                           ;week4_LCD_num_task.c: 40:     sum = num1 - num2;
   396     06C8  3091               	movlw	145
   397     06C9  00AA               	movwf	_sum
   398     06CA  30FF               	movlw	255
   399     06CB  00AB               	movwf	_sum+1
   400     06CC                     l892:
   401                           
   402                           ;week4_LCD_num_task.c: 41:     equal = '=';
   403     06CC  303D               	movlw	61
   404     06CD  00B2               	movwf	_equal
   405     06CE                     l894:
   406                           
   407                           ;week4_LCD_num_task.c: 42:     plus = '+';
   408     06CE  302B               	movlw	43
   409     06CF  00B1               	movwf	_plus
   410     06D0                     l896:
   411                           
   412                           ;week4_LCD_num_task.c: 43:     minus = '-';
   413     06D0  302D               	movlw	45
   414     06D1  00B0               	movwf	_minus
   415     06D2                     l898:
   416                           
   417                           ;week4_LCD_num_task.c: 44:     LCD_command(0x80);
   418     06D2  3080               	movlw	128
   419     06D3  120A  118A  265D  120A  118A  	fcall	_LCD_command
   420     06D8                     l900:
   421                           
   422                           ;week4_LCD_num_task.c: 45:     LCD_output(num1);
   423     06D8  307B               	movlw	123
   424     06D9  00FA               	movwf	LCD_output@n
   425     06DA  3000               	movlw	0
   426     06DB  00FB               	movwf	LCD_output@n+1
   427     06DC  120A  118A  271D  120A  118A  	fcall	_LCD_output
   428     06E1                     l902:
   429                           
   430                           ;week4_LCD_num_task.c: 46:     LCD_data(minus);
   431     06E1  302D               	movlw	45
   432     06E2  120A  118A  2633  120A  118A  	fcall	_LCD_data
   433     06E7                     l904:
   434                           
   435                           ;week4_LCD_num_task.c: 47:     LCD_output(num2);
   436     06E7  30EA               	movlw	234
   437     06E8  00FA               	movwf	LCD_output@n
   438     06E9  3000               	movlw	0
   439     06EA  00FB               	movwf	LCD_output@n+1
   440     06EB  120A  118A  271D  120A  118A  	fcall	_LCD_output
   441     06F0                     l906:
   442                           
   443                           ;week4_LCD_num_task.c: 48:     LCD_data(equal);
   444     06F0  303D               	movlw	61
   445     06F1  120A  118A  2633  120A  118A  	fcall	_LCD_data
   446     06F6                     l912:
   447                           
   448                           ;week4_LCD_num_task.c: 52:         LCD_data(minus);
   449     06F6  302D               	movlw	45
   450     06F7  120A  118A  2633  120A  118A  	fcall	_LCD_data
   451     06FC                     l914:
   452                           
   453                           ;week4_LCD_num_task.c: 53:         sum=-sum;}
   454     06FC  1283               	bcf	3,5	;RP0=0, select bank0
   455     06FD  1303               	bcf	3,6	;RP1=0, select bank0
   456     06FE  09AA               	comf	_sum,f
   457     06FF  09AB               	comf	_sum+1,f
   458     0700  0AAA               	incf	_sum,f
   459     0701  1903               	skipnz
   460     0702  0AAB               	incf	_sum+1,f
   461     0703                     l916:
   462                           
   463                           ;week4_LCD_num_task.c: 54:     if (sum == 0)
   464     0703  082A               	movf	_sum,w
   465     0704  042B               	iorwf	_sum+1,w
   466     0705  1D03               	btfss	3,2
   467     0706  2F08               	goto	u341
   468     0707  2F09               	goto	u340
   469     0708                     u341:
   470     0708  2F10               	goto	l920
   471     0709                     u340:
   472     0709                     l918:
   473                           
   474                           ;week4_LCD_num_task.c: 55:         LCD_data(0x30);
   475     0709  3030               	movlw	48
   476     070A  120A  118A  2633  120A  118A  	fcall	_LCD_data
   477     070F  2F19               	goto	l43
   478     0710                     l920:
   479                           
   480                           ;week4_LCD_num_task.c: 57:         LCD_output(sum);
   481     0710  082B               	movf	_sum+1,w
   482     0711  00FB               	movwf	LCD_output@n+1
   483     0712  082A               	movf	_sum,w
   484     0713  00FA               	movwf	LCD_output@n
   485     0714  120A  118A  271D  120A  118A  	fcall	_LCD_output
   486     0719                     l43:	
   487                           ;week4_LCD_num_task.c: 58:     while (1);
   488                           
   489     0719  2F19               	goto	l43
   490     071A  120A  118A  2800   	ljmp	start
   491     071D                     __end_of_main:
   492                           
   493                           	psect	text1
   494     071D                     __ptext1:	
   495 ;; *************** function _LCD_output *****************
   496 ;; Defined at:
   497 ;;		line 87 in file "week4_LCD_num_task.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;  n               2   10[COMMON] unsigned int 
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  j               2    1[BANK0 ] int 
   502 ;;  i               1    3[BANK0 ] unsigned char 
   503 ;;  result          1    0[BANK0 ] unsigned char 
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   513 ;;      Params:         2       0       0       0       0
   514 ;;      Locals:         0       4       0       0       0
   515 ;;      Temps:          2       0       0       0       0
   516 ;;      Totals:         4       4       0       0       0
   517 ;;Total ram usage:        8 bytes
   518 ;; Hardware stack levels used: 1
   519 ;; Hardware stack levels required when called: 1
   520 ;; This function calls:
   521 ;;		_LCD_data
   522 ;;		___bmul
   523 ;;		___lwdiv
   524 ;; This function is called by:
   525 ;;		_main
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529     071D                     _LCD_output:	
   530                           ;psect for function _LCD_output
   531                           
   532     071D                     l856:	
   533                           ;incstack = 0
   534                           ; Regs used in _LCD_output: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   535                           
   536                           
   537                           ;week4_LCD_num_task.c: 88:     unsigned char result, i = 0;
   538     071D  1283               	bcf	3,5	;RP0=0, select bank0
   539     071E  1303               	bcf	3,6	;RP1=0, select bank0
   540     071F  01B6               	clrf	LCD_output@i
   541                           
   542                           ;week4_LCD_num_task.c: 89:            while (n != 0) {
   543     0720  2F55               	goto	l866
   544     0721                     l858:
   545                           
   546                           ;week4_LCD_num_task.c: 90:         result = n - ((n / 10)*10);
   547     0721  30F6               	movlw	246
   548     0722  00F7               	movwf	___bmul@multiplicand
   549     0723  087B               	movf	LCD_output@n+1,w
   550     0724  00F3               	movwf	___lwdiv@dividend+1
   551     0725  087A               	movf	LCD_output@n,w
   552     0726  00F2               	movwf	___lwdiv@dividend
   553     0727  300A               	movlw	10
   554     0728  00F0               	movwf	___lwdiv@divisor
   555     0729  3000               	movlw	0
   556     072A  00F1               	movwf	___lwdiv@divisor+1
   557     072B  120A  118A  2675  120A  118A  	fcall	___lwdiv
   558     0730  0870               	movf	?___lwdiv,w
   559     0731  120A  118A  2648  120A  118A  	fcall	___bmul
   560     0736  077A               	addwf	LCD_output@n,w
   561     0737  1283               	bcf	3,5	;RP0=0, select bank0
   562     0738  1303               	bcf	3,6	;RP1=0, select bank0
   563     0739  00B3               	movwf	LCD_output@result
   564     073A                     l860:
   565                           
   566                           ;week4_LCD_num_task.c: 91:         num_arr[i] = result;
   567     073A  0836               	movf	LCD_output@i,w
   568     073B  3E20               	addlw	(low (_num_arr| 0))& (0+255)
   569     073C  0084               	movwf	4
   570     073D  0833               	movf	LCD_output@result,w
   571     073E  1383               	bcf	3,7	;select IRP bank0
   572     073F  0080               	movwf	0
   573     0740                     l862:
   574                           
   575                           ;week4_LCD_num_task.c: 92:         i++;
   576     0740  3001               	movlw	1
   577     0741  00FF               	movwf	btemp+1
   578     0742  087F               	movf	btemp+1,w
   579     0743  07B6               	addwf	LCD_output@i,f
   580     0744                     l864:
   581                           
   582                           ;week4_LCD_num_task.c: 93:         n /= 10;
   583     0744  300A               	movlw	10
   584     0745  00F0               	movwf	___lwdiv@divisor
   585     0746  3000               	movlw	0
   586     0747  00F1               	movwf	___lwdiv@divisor+1
   587     0748  087B               	movf	LCD_output@n+1,w
   588     0749  00F3               	movwf	___lwdiv@dividend+1
   589     074A  087A               	movf	LCD_output@n,w
   590     074B  00F2               	movwf	___lwdiv@dividend
   591     074C  120A  118A  2675  120A  118A  	fcall	___lwdiv
   592     0751  0871               	movf	?___lwdiv+1,w
   593     0752  00FB               	movwf	LCD_output@n+1
   594     0753  0870               	movf	?___lwdiv,w
   595     0754  00FA               	movwf	LCD_output@n
   596     0755                     l866:
   597                           
   598                           ;week4_LCD_num_task.c: 89:            while (n != 0) {
   599     0755  087A               	movf	LCD_output@n,w
   600     0756  047B               	iorwf	LCD_output@n+1,w
   601     0757  1D03               	btfss	3,2
   602     0758  2F5A               	goto	u321
   603     0759  2F5B               	goto	u320
   604     075A                     u321:
   605     075A  2F21               	goto	l858
   606     075B                     u320:
   607     075B                     l868:
   608                           
   609                           ;week4_LCD_num_task.c: 95:     num_arr[i] = '\0';
   610     075B  1283               	bcf	3,5	;RP0=0, select bank0
   611     075C  1303               	bcf	3,6	;RP1=0, select bank0
   612     075D  0836               	movf	LCD_output@i,w
   613     075E  3E20               	addlw	(low (_num_arr| 0))& (0+255)
   614     075F  0084               	movwf	4
   615     0760  1383               	bcf	3,7	;select IRP bank0
   616     0761  0180               	clrf	0
   617     0762                     l870:
   618                           
   619                           ;week4_LCD_num_task.c: 96:     i -= 1;
   620     0762  3001               	movlw	1
   621     0763  02B6               	subwf	LCD_output@i,f
   622     0764                     l872:
   623                           
   624                           ;week4_LCD_num_task.c: 97:     for (int j = i; j >= 0; j--) {
   625     0764  0836               	movf	LCD_output@i,w
   626     0765  00FC               	movwf	??_LCD_output
   627     0766  01FD               	clrf	??_LCD_output+1
   628     0767  087C               	movf	??_LCD_output,w
   629     0768  00B4               	movwf	LCD_output@j
   630     0769  087D               	movf	??_LCD_output+1,w
   631     076A  00B5               	movwf	LCD_output@j+1
   632     076B                     l874:
   633     076B  1FB5               	btfss	LCD_output@j+1,7
   634     076C  2F6E               	goto	u331
   635     076D  2F6F               	goto	u330
   636     076E                     u331:
   637     076E  2F70               	goto	l878
   638     076F                     u330:
   639     076F  2F84               	goto	l72
   640     0770                     l878:
   641                           
   642                           ;week4_LCD_num_task.c: 98:         LCD_data(0x30 + num_arr[j]);
   643     0770  0834               	movf	LCD_output@j,w
   644     0771  3E20               	addlw	(low (_num_arr| 0))& (0+255)
   645     0772  0084               	movwf	4
   646     0773  1383               	bcf	3,7	;select IRP bank0
   647     0774  0800               	movf	0,w
   648     0775  3E30               	addlw	48
   649     0776  120A  118A  2633  120A  118A  	fcall	_LCD_data
   650     077B                     l880:
   651                           
   652                           ;week4_LCD_num_task.c: 99:     }
   653     077B  30FF               	movlw	255
   654     077C  1283               	bcf	3,5	;RP0=0, select bank0
   655     077D  1303               	bcf	3,6	;RP1=0, select bank0
   656     077E  07B4               	addwf	LCD_output@j,f
   657     077F  1803               	skipnc
   658     0780  0AB5               	incf	LCD_output@j+1,f
   659     0781  30FF               	movlw	255
   660     0782  07B5               	addwf	LCD_output@j+1,f
   661     0783  2F6B               	goto	l874
   662     0784                     l72:
   663     0784  0008               	return
   664     0785                     __end_of_LCD_output:
   665                           
   666                           	psect	text2
   667     0675                     __ptext2:	
   668 ;; *************** function ___lwdiv *****************
   669 ;; Defined at:
   670 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;  divisor         2    0[COMMON] unsigned int 
   673 ;;  dividend        2    2[COMMON] unsigned int 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  quotient        2    4[COMMON] unsigned int 
   676 ;;  counter         1    6[COMMON] unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  2    0[COMMON] unsigned int 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, btemp+1
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   686 ;;      Params:         4       0       0       0       0
   687 ;;      Locals:         3       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0
   689 ;;      Totals:         7       0       0       0       0
   690 ;;Total ram usage:        7 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; This function calls:
   693 ;;		Nothing
   694 ;; This function is called by:
   695 ;;		_LCD_output
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699     0675                     ___lwdiv:	
   700                           ;psect for function ___lwdiv
   701                           
   702     0675                     l806:	
   703                           ;incstack = 0
   704                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   705                           
   706     0675  01F4               	clrf	___lwdiv@quotient
   707     0676  01F5               	clrf	___lwdiv@quotient+1
   708     0677                     l808:
   709     0677  0870               	movf	___lwdiv@divisor,w
   710     0678  0471               	iorwf	___lwdiv@divisor+1,w
   711     0679  1903               	btfsc	3,2
   712     067A  2E7C               	goto	u201
   713     067B  2E7D               	goto	u200
   714     067C                     u201:
   715     067C  2EB4               	goto	l828
   716     067D                     u200:
   717     067D                     l810:
   718     067D  01F6               	clrf	___lwdiv@counter
   719     067E  0AF6               	incf	___lwdiv@counter,f
   720     067F  2E8B               	goto	l816
   721     0680                     l812:
   722     0680  3001               	movlw	1
   723     0681                     u215:
   724     0681  1003               	clrc
   725     0682  0DF0               	rlf	___lwdiv@divisor,f
   726     0683  0DF1               	rlf	___lwdiv@divisor+1,f
   727     0684  3EFF               	addlw	-1
   728     0685  1D03               	skipz
   729     0686  2E81               	goto	u215
   730     0687                     l814:
   731     0687  3001               	movlw	1
   732     0688  00FF               	movwf	btemp+1
   733     0689  087F               	movf	btemp+1,w
   734     068A  07F6               	addwf	___lwdiv@counter,f
   735     068B                     l816:
   736     068B  1FF1               	btfss	___lwdiv@divisor+1,7
   737     068C  2E8E               	goto	u221
   738     068D  2E8F               	goto	u220
   739     068E                     u221:
   740     068E  2E80               	goto	l812
   741     068F                     u220:
   742     068F                     l818:
   743     068F  3001               	movlw	1
   744     0690                     u235:
   745     0690  1003               	clrc
   746     0691  0DF4               	rlf	___lwdiv@quotient,f
   747     0692  0DF5               	rlf	___lwdiv@quotient+1,f
   748     0693  3EFF               	addlw	-1
   749     0694  1D03               	skipz
   750     0695  2E90               	goto	u235
   751     0696  0871               	movf	___lwdiv@divisor+1,w
   752     0697  0273               	subwf	___lwdiv@dividend+1,w
   753     0698  1D03               	skipz
   754     0699  2E9C               	goto	u245
   755     069A  0870               	movf	___lwdiv@divisor,w
   756     069B  0272               	subwf	___lwdiv@dividend,w
   757     069C                     u245:
   758     069C  1C03               	skipc
   759     069D  2E9F               	goto	u241
   760     069E  2EA0               	goto	u240
   761     069F                     u241:
   762     069F  2EA7               	goto	l824
   763     06A0                     u240:
   764     06A0                     l820:
   765     06A0  0870               	movf	___lwdiv@divisor,w
   766     06A1  02F2               	subwf	___lwdiv@dividend,f
   767     06A2  0871               	movf	___lwdiv@divisor+1,w
   768     06A3  1C03               	skipc
   769     06A4  03F3               	decf	___lwdiv@dividend+1,f
   770     06A5  02F3               	subwf	___lwdiv@dividend+1,f
   771     06A6                     l822:
   772     06A6  1474               	bsf	___lwdiv@quotient,0
   773     06A7                     l824:
   774     06A7  3001               	movlw	1
   775     06A8                     u255:
   776     06A8  1003               	clrc
   777     06A9  0CF1               	rrf	___lwdiv@divisor+1,f
   778     06AA  0CF0               	rrf	___lwdiv@divisor,f
   779     06AB  3EFF               	addlw	-1
   780     06AC  1D03               	skipz
   781     06AD  2EA8               	goto	u255
   782     06AE                     l826:
   783     06AE  3001               	movlw	1
   784     06AF  02F6               	subwf	___lwdiv@counter,f
   785     06B0  1D03               	btfss	3,2
   786     06B1  2EB3               	goto	u261
   787     06B2  2EB4               	goto	u260
   788     06B3                     u261:
   789     06B3  2E8F               	goto	l818
   790     06B4                     u260:
   791     06B4                     l828:
   792     06B4  0875               	movf	___lwdiv@quotient+1,w
   793     06B5  00F1               	movwf	?___lwdiv+1
   794     06B6  0874               	movf	___lwdiv@quotient,w
   795     06B7  00F0               	movwf	?___lwdiv
   796     06B8                     l444:
   797     06B8  0008               	return
   798     06B9                     __end_of___lwdiv:
   799                           
   800                           	psect	text3
   801     0648                     __ptext3:	
   802 ;; *************** function ___bmul *****************
   803 ;; Defined at:
   804 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  multiplier      1    wreg     unsigned char 
   807 ;;  multiplicand    1    7[COMMON] unsigned char 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  multiplier      1    9[COMMON] unsigned char 
   810 ;;  product         1    8[COMMON] unsigned char 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      unsigned char 
   813 ;; Registers used:
   814 ;;		wreg, status,2, status,0, btemp+1
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   820 ;;      Params:         1       0       0       0       0
   821 ;;      Locals:         2       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0
   823 ;;      Totals:         3       0       0       0       0
   824 ;;Total ram usage:        3 bytes
   825 ;; Hardware stack levels used: 1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_LCD_output
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833     0648                     ___bmul:	
   834                           ;psect for function ___bmul
   835                           
   836                           
   837                           ;incstack = 0
   838                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
   839                           ;___bmul@multiplier stored from wreg
   840     0648  00F9               	movwf	___bmul@multiplier
   841     0649                     l790:
   842     0649  01F8               	clrf	___bmul@product
   843     064A                     l792:
   844     064A  1C79               	btfss	___bmul@multiplier,0
   845     064B  2E4D               	goto	u181
   846     064C  2E4E               	goto	u180
   847     064D                     u181:
   848     064D  2E52               	goto	l796
   849     064E                     u180:
   850     064E                     l794:
   851     064E  0877               	movf	___bmul@multiplicand,w
   852     064F  00FF               	movwf	btemp+1
   853     0650  087F               	movf	btemp+1,w
   854     0651  07F8               	addwf	___bmul@product,f
   855     0652                     l796:
   856     0652  1003               	clrc
   857     0653  0DF7               	rlf	___bmul@multiplicand,f
   858     0654                     l798:
   859     0654  1003               	clrc
   860     0655  0CF9               	rrf	___bmul@multiplier,f
   861     0656                     l800:
   862     0656  0879               	movf	___bmul@multiplier,w
   863     0657  1D03               	btfss	3,2
   864     0658  2E5A               	goto	u191
   865     0659  2E5B               	goto	u190
   866     065A                     u191:
   867     065A  2E4A               	goto	l792
   868     065B                     u190:
   869     065B                     l802:
   870     065B  0878               	movf	___bmul@product,w
   871     065C                     l190:
   872     065C  0008               	return
   873     065D                     __end_of___bmul:
   874                           
   875                           	psect	text4
   876     0633                     __ptext4:	
   877 ;; *************** function _LCD_data *****************
   878 ;; Defined at:
   879 ;;		line 116 in file "week4_LCD_num_task.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  hex             1    wreg     unsigned char 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  hex             1    2[COMMON] unsigned char 
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, status,2, status,0, btemp+1
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   893 ;;      Params:         0       0       0       0       0
   894 ;;      Locals:         1       0       0       0       0
   895 ;;      Temps:          2       0       0       0       0
   896 ;;      Totals:         3       0       0       0       0
   897 ;;Total ram usage:        3 bytes
   898 ;; Hardware stack levels used: 1
   899 ;; This function calls:
   900 ;;		Nothing
   901 ;; This function is called by:
   902 ;;		_main
   903 ;;		_LCD_output
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907     0633                     _LCD_data:	
   908                           ;psect for function _LCD_data
   909                           
   910                           
   911                           ;incstack = 0
   912                           ; Regs used in _LCD_data: [wreg+status,2+status,0+btemp+1]
   913                           ;LCD_data@hex stored from wreg
   914     0633  00F2               	movwf	LCD_data@hex
   915     0634                     l780:
   916                           
   917                           ;week4_LCD_num_task.c: 117:     PORTC |= 0x08;
   918     0634  1283               	bcf	3,5	;RP0=0, select bank0
   919     0635  1303               	bcf	3,6	;RP1=0, select bank0
   920     0636  1587               	bsf	7,3	;volatile
   921     0637                     l782:
   922                           
   923                           ;week4_LCD_num_task.c: 118:     PORTD = hex;
   924     0637  0872               	movf	LCD_data@hex,w
   925     0638  0088               	movwf	8	;volatile
   926     0639                     l784:
   927                           
   928                           ;week4_LCD_num_task.c: 119:     PORTC |= 0x01;
   929     0639  1407               	bsf	7,0	;volatile
   930     063A                     l786:
   931                           
   932                           ;week4_LCD_num_task.c: 120:     PORTC &= ~0x01;
   933     063A  30FE               	movlw	254
   934     063B  00FF               	movwf	btemp+1
   935     063C  087F               	movf	btemp+1,w
   936     063D  0587               	andwf	7,f	;volatile
   937     063E                     l788:
   938                           
   939                           ;week4_LCD_num_task.c: 121:     _delay((unsigned long)((50)*(6000000/4000.0)));
   940     063E  3062               	movlw	98
   941     063F  00F1               	movwf	??_LCD_data+1
   942     0640  3065               	movlw	101
   943     0641  00F0               	movwf	??_LCD_data
   944     0642                     u357:
   945     0642  0BF0               	decfsz	??_LCD_data,f
   946     0643  2E42               	goto	u357
   947     0644  0BF1               	decfsz	??_LCD_data+1,f
   948     0645  2E42               	goto	u357
   949     0646  2E47               	nop2
   950     0647                     l78:
   951     0647  0008               	return
   952     0648                     __end_of_LCD_data:
   953                           
   954                           	psect	text5
   955     0785                     __ptext5:	
   956 ;; *************** function _LCD_PIC_init *****************
   957 ;; Defined at:
   958 ;;		line 62 in file "week4_LCD_num_task.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   972 ;;      Params:         0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0
   974 ;;      Temps:          2       0       0       0       0
   975 ;;      Totals:         2       0       0       0       0
   976 ;;Total ram usage:        2 bytes
   977 ;; Hardware stack levels used: 1
   978 ;; Hardware stack levels required when called: 1
   979 ;; This function calls:
   980 ;;		_LCD_command
   981 ;; This function is called by:
   982 ;;		_main
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986     0785                     _LCD_PIC_init:	
   987                           ;psect for function _LCD_PIC_init
   988                           
   989     0785                     l832:	
   990                           ;incstack = 0
   991                           ; Regs used in _LCD_PIC_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   992                           
   993                           
   994                           ;week4_LCD_num_task.c: 64:     TRISC = 0x00;
   995     0785  1683               	bsf	3,5	;RP0=1, select bank1
   996     0786  1303               	bcf	3,6	;RP1=0, select bank1
   997     0787  0187               	clrf	7	;volatile
   998                           
   999                           ;week4_LCD_num_task.c: 65:     TRISD = 0x00;
  1000     0788  0188               	clrf	8	;volatile
  1001     0789                     l834:
  1002                           
  1003                           ;week4_LCD_num_task.c: 67:     LCD_command(0x30);
  1004     0789  3030               	movlw	48
  1005     078A  120A  118A  265D  120A  118A  	fcall	_LCD_command
  1006     078F                     l836:
  1007                           
  1008                           ;week4_LCD_num_task.c: 68:     _delay((unsigned long)((50)*(6000000/4000.0)));
  1009     078F  3062               	movlw	98
  1010     0790  00F4               	movwf	??_LCD_PIC_init+1
  1011     0791  3065               	movlw	101
  1012     0792  00F3               	movwf	??_LCD_PIC_init
  1013     0793                     u367:
  1014     0793  0BF3               	decfsz	??_LCD_PIC_init,f
  1015     0794  2F93               	goto	u367
  1016     0795  0BF4               	decfsz	??_LCD_PIC_init+1,f
  1017     0796  2F93               	goto	u367
  1018     0797  2F98               	nop2
  1019     0798                     l838:
  1020                           
  1021                           ;week4_LCD_num_task.c: 69:     LCD_command(0x30);
  1022     0798  3030               	movlw	48
  1023     0799  120A  118A  265D  120A  118A  	fcall	_LCD_command
  1024     079E                     l840:
  1025                           
  1026                           ;week4_LCD_num_task.c: 70:     _delay((unsigned long)((50)*(6000000/4000.0)));
  1027     079E  3062               	movlw	98
  1028     079F  00F4               	movwf	??_LCD_PIC_init+1
  1029     07A0  3065               	movlw	101
  1030     07A1  00F3               	movwf	??_LCD_PIC_init
  1031     07A2                     u377:
  1032     07A2  0BF3               	decfsz	??_LCD_PIC_init,f
  1033     07A3  2FA2               	goto	u377
  1034     07A4  0BF4               	decfsz	??_LCD_PIC_init+1,f
  1035     07A5  2FA2               	goto	u377
  1036     07A6  2FA7               	nop2
  1037     07A7                     l842:
  1038                           
  1039                           ;week4_LCD_num_task.c: 71:     LCD_command(0x30);
  1040     07A7  3030               	movlw	48
  1041     07A8  120A  118A  265D  120A  118A  	fcall	_LCD_command
  1042     07AD                     l844:
  1043                           
  1044                           ;week4_LCD_num_task.c: 72:     _delay((unsigned long)((50)*(6000000/4000.0)));
  1045     07AD  3062               	movlw	98
  1046     07AE  00F4               	movwf	??_LCD_PIC_init+1
  1047     07AF  3065               	movlw	101
  1048     07B0  00F3               	movwf	??_LCD_PIC_init
  1049     07B1                     u387:
  1050     07B1  0BF3               	decfsz	??_LCD_PIC_init,f
  1051     07B2  2FB1               	goto	u387
  1052     07B3  0BF4               	decfsz	??_LCD_PIC_init+1,f
  1053     07B4  2FB1               	goto	u387
  1054     07B5  2FB6               	nop2
  1055     07B6                     l846:
  1056                           
  1057                           ;week4_LCD_num_task.c: 73:     LCD_command(0x38);
  1058     07B6  3038               	movlw	56
  1059     07B7  120A  118A  265D  120A  118A  	fcall	_LCD_command
  1060     07BC                     l49:	
  1061                           ;week4_LCD_num_task.c: 74:     while (RD7 == 1);
  1062                           
  1063     07BC  1283               	bcf	3,5	;RP0=0, select bank0
  1064     07BD  1303               	bcf	3,6	;RP1=0, select bank0
  1065     07BE  1B88               	btfsc	8,7	;volatile
  1066     07BF  2FC1               	goto	u271
  1067     07C0  2FC2               	goto	u270
  1068     07C1                     u271:
  1069     07C1  2FBC               	goto	l49
  1070     07C2                     u270:
  1071     07C2                     l848:
  1072                           
  1073                           ;week4_LCD_num_task.c: 75:     LCD_command(0x08);
  1074     07C2  3008               	movlw	8
  1075     07C3  120A  118A  265D  120A  118A  	fcall	_LCD_command
  1076     07C8                     l52:	
  1077                           ;week4_LCD_num_task.c: 76:     while (RD7 == 1);
  1078                           
  1079     07C8  1283               	bcf	3,5	;RP0=0, select bank0
  1080     07C9  1303               	bcf	3,6	;RP1=0, select bank0
  1081     07CA  1B88               	btfsc	8,7	;volatile
  1082     07CB  2FCD               	goto	u281
  1083     07CC  2FCE               	goto	u280
  1084     07CD                     u281:
  1085     07CD  2FC8               	goto	l52
  1086     07CE                     u280:
  1087     07CE                     l850:
  1088                           
  1089                           ;week4_LCD_num_task.c: 77:     LCD_command(0x01);
  1090     07CE  3001               	movlw	1
  1091     07CF  120A  118A  265D  120A  118A  	fcall	_LCD_command
  1092     07D4                     l55:	
  1093                           ;week4_LCD_num_task.c: 78:     while (RD7 == 1);
  1094                           
  1095     07D4  1283               	bcf	3,5	;RP0=0, select bank0
  1096     07D5  1303               	bcf	3,6	;RP1=0, select bank0
  1097     07D6  1B88               	btfsc	8,7	;volatile
  1098     07D7  2FD9               	goto	u291
  1099     07D8  2FDA               	goto	u290
  1100     07D9                     u291:
  1101     07D9  2FD4               	goto	l55
  1102     07DA                     u290:
  1103     07DA                     l852:
  1104                           
  1105                           ;week4_LCD_num_task.c: 79:     LCD_command(0x06);
  1106     07DA  3006               	movlw	6
  1107     07DB  120A  118A  265D  120A  118A  	fcall	_LCD_command
  1108     07E0                     l58:	
  1109                           ;week4_LCD_num_task.c: 80:     while (RD7 == 1);
  1110                           
  1111     07E0  1283               	bcf	3,5	;RP0=0, select bank0
  1112     07E1  1303               	bcf	3,6	;RP1=0, select bank0
  1113     07E2  1B88               	btfsc	8,7	;volatile
  1114     07E3  2FE5               	goto	u301
  1115     07E4  2FE6               	goto	u300
  1116     07E5                     u301:
  1117     07E5  2FE0               	goto	l58
  1118     07E6                     u300:
  1119     07E6                     l854:
  1120                           
  1121                           ;week4_LCD_num_task.c: 81:     LCD_command(0x0E);
  1122     07E6  300E               	movlw	14
  1123     07E7  120A  118A  265D  120A  118A  	fcall	_LCD_command
  1124     07EC                     l61:	
  1125                           ;week4_LCD_num_task.c: 82:     while (RD7 == 1);
  1126                           
  1127     07EC  1283               	bcf	3,5	;RP0=0, select bank0
  1128     07ED  1303               	bcf	3,6	;RP1=0, select bank0
  1129     07EE  1B88               	btfsc	8,7	;volatile
  1130     07EF  2FF1               	goto	u311
  1131     07F0  2FF2               	goto	u310
  1132     07F1                     u311:
  1133     07F1  2FEC               	goto	l61
  1134     07F2                     u310:
  1135     07F2                     l64:
  1136     07F2  0008               	return
  1137     07F3                     __end_of_LCD_PIC_init:
  1138                           
  1139                           	psect	text6
  1140     065D                     __ptext6:	
  1141 ;; *************** function _LCD_command *****************
  1142 ;; Defined at:
  1143 ;;		line 105 in file "week4_LCD_num_task.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  hex             1    wreg     unsigned char 
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;  hex             1    2[COMMON] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  1    wreg      void 
  1150 ;; Registers used:
  1151 ;;		wreg, status,2, status,0, btemp+1
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1157 ;;      Params:         0       0       0       0       0
  1158 ;;      Locals:         1       0       0       0       0
  1159 ;;      Temps:          2       0       0       0       0
  1160 ;;      Totals:         3       0       0       0       0
  1161 ;;Total ram usage:        3 bytes
  1162 ;; Hardware stack levels used: 1
  1163 ;; This function calls:
  1164 ;;		Nothing
  1165 ;; This function is called by:
  1166 ;;		_main
  1167 ;;		_LCD_PIC_init
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171     065D                     _LCD_command:	
  1172                           ;psect for function _LCD_command
  1173                           
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _LCD_command: [wreg+status,2+status,0+btemp+1]
  1177                           ;LCD_command@hex stored from wreg
  1178     065D  00F2               	movwf	LCD_command@hex
  1179     065E                     l772:
  1180                           
  1181                           ;week4_LCD_num_task.c: 106:     PORTC &= 0xF7;
  1182     065E  30F7               	movlw	247
  1183     065F  00FF               	movwf	btemp+1
  1184     0660  087F               	movf	btemp+1,w
  1185     0661  1283               	bcf	3,5	;RP0=0, select bank0
  1186     0662  1303               	bcf	3,6	;RP1=0, select bank0
  1187     0663  0587               	andwf	7,f	;volatile
  1188     0664                     l774:
  1189                           
  1190                           ;week4_LCD_num_task.c: 107:     PORTD = hex;
  1191     0664  0872               	movf	LCD_command@hex,w
  1192     0665  0088               	movwf	8	;volatile
  1193     0666                     l776:
  1194                           
  1195                           ;week4_LCD_num_task.c: 108:     PORTC |= 0x01;
  1196     0666  1407               	bsf	7,0	;volatile
  1197     0667                     l778:
  1198                           
  1199                           ;week4_LCD_num_task.c: 109:     PORTC &= ~0x01;
  1200     0667  30FE               	movlw	254
  1201     0668  00FF               	movwf	btemp+1
  1202     0669  087F               	movf	btemp+1,w
  1203     066A  0587               	andwf	7,f	;volatile
  1204                           
  1205                           ;week4_LCD_num_task.c: 110:     _delay((unsigned long)((50)*(6000000/4000.0)));
  1206     066B  3062               	movlw	98
  1207     066C  00F1               	movwf	??_LCD_command+1
  1208     066D  3065               	movlw	101
  1209     066E  00F0               	movwf	??_LCD_command
  1210     066F                     u397:
  1211     066F  0BF0               	decfsz	??_LCD_command,f
  1212     0670  2E6F               	goto	u397
  1213     0671  0BF1               	decfsz	??_LCD_command+1,f
  1214     0672  2E6F               	goto	u397
  1215     0673  2E74               	nop2
  1216     0674                     l75:
  1217     0674  0008               	return
  1218     0675                     __end_of_LCD_command:
  1219     007E                     btemp	set	126	;btemp
  1220     007E                     wtemp0	set	126
  1221                           
  1222                           	psect	config
  1223                           
  1224                           ;Config register CONFIG @ 0x2007
  1225                           ;	Oscillator Selection bits
  1226                           ;	FOSC = EXTRC, RC oscillator
  1227                           ;	Watchdog Timer Enable bit
  1228                           ;	WDTE = OFF, WDT disabled
  1229                           ;	Power-up Timer Enable bit
  1230                           ;	PWRTE = OFF, PWRT disabled
  1231                           ;	Brown-out Reset Enable bit
  1232                           ;	BOREN = OFF, BOR disabled
  1233                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1234                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1235                           ;	Data EEPROM Memory Code Protection bit
  1236                           ;	CPD = OFF, Data EEPROM code protection off
  1237                           ;	Flash Program Memory Write Enable bits
  1238                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1239                           ;	In-Circuit Debugger Mode bit
  1240                           ;	DEBUG = 0x1, unprogrammed default
  1241                           ;	Flash Program Memory Code Protection bit
  1242                           ;	CP = OFF, Code protection off
  1243     2007                     	org	8199
  1244     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      4      23
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LCD_output
    _LCD_output->___bmul
    ___bmul->___lwdiv
    _LCD_PIC_init->_LCD_command

Critical Paths under _main in BANK0

    _main->_LCD_output

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1199
                       _LCD_PIC_init
                        _LCD_command
                           _LCD_data
                         _LCD_output
 ---------------------------------------------------------------------------------
 (1) _LCD_output                                           8     6      2    1133
                                             10 COMMON     4     2      2
                                              0 BANK0      4     4      0
                           _LCD_data
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     168
                                              7 COMMON     3     2      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCD_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_PIC_init                                         2     2      0      22
                                              3 COMMON     2     2      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_PIC_init
     _LCD_command
   _LCD_command
   _LCD_data
   _LCD_output
     _LCD_data
     ___bmul
       ___lwdiv (ARG)
     ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      25       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4      17       5       28.7%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      25      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Jan 06 21:23:07 2024

         ___bmul@product 0078                       l43 0719                       l52 07C8  
                     l61 07EC                       l55 07D4                       l64 07F2  
                     l72 0784                       l49 07BC                       l58 07E0  
                     l75 0674                       l78 0647                       fsr 0004  
                    l190 065C                      l444 06B8                      l800 0656  
                    l802 065B                      l810 067D                      l820 06A0  
                    l812 0680                      l900 06D8                      l822 06A6  
                    l814 0687                      l806 0675                      l902 06E1  
                    l840 079E                      l832 0785                      l824 06A7  
                    l816 068B                      l808 0677                      l920 0710  
                    l912 06F6                      l904 06E7                      l850 07CE  
                    l842 07A7                      l834 0789                      l826 06AE  
                    l818 068F                      l914 06FC                      l906 06F0  
                    l772 065E                      l852 07DA                      l844 07AD  
                    l836 078F                      l780 0634                      l828 06B4  
                    l860 073A                      l916 0703                      l774 0664  
                    l854 07E6                      l846 07B6                      l838 0798  
                    l782 0637                      l790 0649                      l870 0762  
                    l862 0740                      l918 0709                      l776 0666  
                    l848 07C2                      l784 0639                      l792 064A  
                    l880 077B                      l872 0764                      l864 0744  
                    l856 071D                      l778 0667                      l786 063A  
                    l794 064E                      l874 076B                      l858 0721  
                    l866 0755                      l890 06C8                      l788 063E  
                    l796 0652                      l868 075B                      l892 06CC  
                    l884 06B9                      l798 0654                      l878 0770  
                    l894 06CE                      l886 06BE                      l896 06D0  
                    l888 06C4                      l898 06D2                      _RD7 0047  
                    u200 067D                      u201 067C                      u300 07E6  
                    u220 068F                      u301 07E5                      u221 068E  
                    u310 07F2                      u311 07F1                      u215 0681  
                    u240 06A0                      u320 075B                      u241 069F  
                    u321 075A                      u330 076F                      u235 0690  
                    u331 076E                      u180 064E                      u260 06B4  
                    u340 0709                      u181 064D                      u261 06B3  
                    u245 069C                      u341 0708                      u270 07C2  
                    u190 065B                      u271 07C1                      u191 065A  
                    u255 06A8                      u280 07CE                      u281 07CD  
                    u290 07DA                      u291 07D9                      u357 0642  
                    u367 0793                      u377 07A2                      u387 07B1  
                    u397 066F                      fsr0 0004                      _sum 002A  
                    indf 0000              ?_LCD_output 007A             ?_LCD_command 0070  
         ??_LCD_PIC_init 0073                     _main 06B9                     _num1 002E  
                   _num2 002C                     _plus 0031                     btemp 007E  
                   start 0000        ___bmul@multiplier 0079         __end_of_LCD_data 0648  
                  ?_main 0070          __end_of___lwdiv 06B9                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  _equal 0032                    _minus 0030              LCD_data@hex 0072  
                  status 0003                    wtemp0 007E          __initialization 07F3  
           __end_of_main 071D                   ??_main 007E              LCD_output@i 0036  
            LCD_output@j 0034              LCD_output@n 007A                   ___bmul 0648  
              ??___lwdiv 0074     __end_of_LCD_PIC_init 07F3         LCD_output@result 0033  
__end_of__initialization 07FC                ?_LCD_data 0070      ___bmul@multiplicand 0077  
         __pcstackCOMMON 0070             ??_LCD_output 007C               __pbssBANK0 0020  
             ??_LCD_data 0070               __pmaintext 06B9                  ?___bmul 0077  
     __end_of_LCD_output 0785                  ___lwdiv 0675                  __ptext1 071D  
                __ptext2 0675                  __ptext3 0648                  __ptext4 0633  
                __ptext5 0785                  __ptext6 065D                  _num_arr 0020  
                clrloop0 062C     end_of_initialization 07FC             _LCD_PIC_init 0785  
         __end_of___bmul 065D      start_initialization 07F3            ??_LCD_command 0070  
               ??___bmul 0078                ___latbits 0002            __pcstackBANK0 0033  
    __end_of_LCD_command 0675         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
       ___lwdiv@quotient 0074                 _LCD_data 0633                clear_ram0 062B  
            _LCD_command 065D          ___lwdiv@divisor 0070          ___lwdiv@counter 0076  
             _LCD_output 071D            ?_LCD_PIC_init 0070           LCD_command@hex 0072  
