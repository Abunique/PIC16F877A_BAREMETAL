

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sun Dec 31 20:41:48 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 22/03/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0013                     	;# 
    74     0014                     	;# 
    75     0015                     	;# 
    76     0015                     	;# 
    77     0016                     	;# 
    78     0017                     	;# 
    79     0018                     	;# 
    80     0019                     	;# 
    81     001A                     	;# 
    82     001B                     	;# 
    83     001B                     	;# 
    84     001C                     	;# 
    85     001D                     	;# 
    86     001E                     	;# 
    87     001F                     	;# 
    88     0081                     	;# 
    89     0085                     	;# 
    90     0086                     	;# 
    91     0087                     	;# 
    92     0088                     	;# 
    93     0089                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     008E                     	;# 
    97     0091                     	;# 
    98     0092                     	;# 
    99     0093                     	;# 
   100     0094                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009C                     	;# 
   104     009D                     	;# 
   105     009E                     	;# 
   106     009F                     	;# 
   107     010C                     	;# 
   108     010D                     	;# 
   109     010E                     	;# 
   110     010F                     	;# 
   111     018C                     	;# 
   112     018D                     	;# 
   113     0000                     	;# 
   114     0001                     	;# 
   115     0002                     	;# 
   116     0003                     	;# 
   117     0004                     	;# 
   118     0005                     	;# 
   119     0006                     	;# 
   120     0007                     	;# 
   121     0008                     	;# 
   122     0009                     	;# 
   123     000A                     	;# 
   124     000B                     	;# 
   125     000C                     	;# 
   126     000D                     	;# 
   127     000E                     	;# 
   128     000E                     	;# 
   129     000F                     	;# 
   130     0010                     	;# 
   131     0011                     	;# 
   132     0012                     	;# 
   133     0013                     	;# 
   134     0014                     	;# 
   135     0015                     	;# 
   136     0015                     	;# 
   137     0016                     	;# 
   138     0017                     	;# 
   139     0018                     	;# 
   140     0019                     	;# 
   141     001A                     	;# 
   142     001B                     	;# 
   143     001B                     	;# 
   144     001C                     	;# 
   145     001D                     	;# 
   146     001E                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     0087                     	;# 
   152     0088                     	;# 
   153     0089                     	;# 
   154     008C                     	;# 
   155     008D                     	;# 
   156     008E                     	;# 
   157     0091                     	;# 
   158     0092                     	;# 
   159     0093                     	;# 
   160     0094                     	;# 
   161     0098                     	;# 
   162     0099                     	;# 
   163     009C                     	;# 
   164     009D                     	;# 
   165     009E                     	;# 
   166     009F                     	;# 
   167     010C                     	;# 
   168     010D                     	;# 
   169     010E                     	;# 
   170     010F                     	;# 
   171     018C                     	;# 
   172     018D                     	;# 
   173     0008                     _PORTD	set	8
   174     0007                     _PORTC	set	7
   175     0047                     _RD7	set	71
   176     0088                     _TRISD	set	136
   177     0087                     _TRISC	set	135
   178                           
   179                           	psect	cinit
   180     07F3                     start_initialization:	
   181                           ; #config settings
   182                           
   183     07F3                     __initialization:
   184                           
   185                           ; Clear objects allocated to BANK0
   186     07F3  1383               	bcf	3,7	;select IRP bank0
   187     07F4  3020               	movlw	low __pbssBANK0
   188     07F5  0084               	movwf	4
   189     07F6  3032               	movlw	low (__pbssBANK0+18)
   190     07F7  120A  118A  2647  120A  118A  	fcall	clear_ram0
   191     07FC                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194     07FC                     __end_of__initialization:
   195     07FC  0183               	clrf	3
   196     07FD  120A  118A  2ED5   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	bssBANK0
   199     0020                     __pbssBANK0:
   200     0020                     _num_arr:
   201     0020                     	ds	10
   202     002A                     _sum:
   203     002A                     	ds	2
   204     002C                     _num2:
   205     002C                     	ds	2
   206     002E                     _num1:
   207     002E                     	ds	2
   208     0030                     _plus:
   209     0030                     	ds	1
   210     0031                     _equal:
   211     0031                     	ds	1
   212                           
   213                           	psect	clrtext
   214     0647                     clear_ram0:	
   215                           ;	Called with FSR containing the base address, and
   216                           ;	W with the last address+1
   217                           
   218     0647  0064               	clrwdt	;clear the watchdog before getting into this loop
   219     0648                     clrloop0:
   220     0648  0180               	clrf	0	;clear RAM location pointed to by FSR
   221     0649  0A84               	incf	4,f	;increment pointer
   222     064A  0604               	xorwf	4,w	;XOR with final address
   223     064B  1903               	btfsc	3,2	;have we reached the end yet?
   224     064C  3400               	retlw	0	;all done for this memory range, return
   225     064D  0604               	xorwf	4,w	;XOR again to restore value
   226     064E  2E48               	goto	clrloop0	;do the next byte
   227                           
   228                           	psect	cstackCOMMON
   229     0070                     __pcstackCOMMON:
   230     0070                     ?_LCD_PIC_init:
   231     0070                     ?_LCD_command:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ??_LCD_command:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?_LCD_data:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ??_LCD_data:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?_main:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ?___lwdiv:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ___lwdiv@divisor:	
   250                           ; 2 bytes @ 0x0
   251                           
   252                           
   253                           ; 2 bytes @ 0x0
   254     0070                     	ds	2
   255     0072                     LCD_command@hex:
   256     0072                     LCD_data@hex:	
   257                           ; 1 bytes @ 0x2
   258                           
   259     0072                     ___lwdiv@dividend:	
   260                           ; 1 bytes @ 0x2
   261                           
   262                           
   263                           ; 2 bytes @ 0x2
   264     0072                     	ds	1
   265     0073                     ??_LCD_PIC_init:
   266                           
   267                           ; 1 bytes @ 0x3
   268     0073                     	ds	1
   269     0074                     ??___lwdiv:
   270     0074                     ___lwdiv@quotient:	
   271                           ; 1 bytes @ 0x4
   272                           
   273                           
   274                           ; 2 bytes @ 0x4
   275     0074                     	ds	2
   276     0076                     ___lwdiv@counter:
   277                           
   278                           ; 1 bytes @ 0x6
   279     0076                     	ds	1
   280     0077                     ?___bmul:
   281     0077                     ___bmul@multiplicand:	
   282                           ; 1 bytes @ 0x7
   283                           
   284                           
   285                           ; 1 bytes @ 0x7
   286     0077                     	ds	1
   287     0078                     ??___bmul:
   288     0078                     ___bmul@product:	
   289                           ; 1 bytes @ 0x8
   290                           
   291                           
   292                           ; 1 bytes @ 0x8
   293     0078                     	ds	1
   294     0079                     ___bmul@multiplier:
   295                           
   296                           ; 1 bytes @ 0x9
   297     0079                     	ds	1
   298     007A                     ?_LCD_output:
   299     007A                     LCD_output@n:	
   300                           ; 1 bytes @ 0xA
   301                           
   302                           
   303                           ; 2 bytes @ 0xA
   304     007A                     	ds	2
   305     007C                     ??_LCD_output:
   306                           
   307                           ; 1 bytes @ 0xC
   308     007C                     	ds	2
   309     007E                     ??_main:
   310                           
   311                           	psect	cstackBANK0
   312     0032                     __pcstackBANK0:	
   313                           ; 1 bytes @ 0xE
   314                           
   315     0032                     LCD_output@result:
   316                           
   317                           ; 1 bytes @ 0x0
   318     0032                     	ds	1
   319     0033                     LCD_output@j:
   320                           
   321                           ; 2 bytes @ 0x1
   322     0033                     	ds	2
   323     0035                     LCD_output@i:
   324                           
   325                           ; 1 bytes @ 0x3
   326     0035                     	ds	1
   327                           
   328                           	psect	maintext
   329     06D5                     __pmaintext:	
   330 ;;
   331 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   332 ;;
   333 ;; *************** function _main *****************
   334 ;; Defined at:
   335 ;;		line 35 in file "LCD_number_display.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;		None
   338 ;; Auto vars:     Size  Location     Type
   339 ;;		None
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : B00/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   349 ;;      Params:         0       0       0       0       0
   350 ;;      Locals:         0       0       0       0       0
   351 ;;      Temps:          0       0       0       0       0
   352 ;;      Totals:         0       0       0       0       0
   353 ;;Total ram usage:        0 bytes
   354 ;; Hardware stack levels required when called: 2
   355 ;; This function calls:
   356 ;;		_LCD_PIC_init
   357 ;;		_LCD_command
   358 ;;		_LCD_data
   359 ;;		_LCD_output
   360 ;; This function is called by:
   361 ;;		Startup code after reset
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365     06D5                     _main:	
   366                           ;psect for function _main
   367                           
   368     06D5                     l864:	
   369                           ;incstack = 0
   370                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   371                           
   372                           
   373                           ;LCD_number_display.c: 36:     LCD_PIC_init();
   374     06D5  120A  118A  2785  120A  118A  	fcall	_LCD_PIC_init
   375     06DA                     l866:
   376                           
   377                           ;LCD_number_display.c: 37:     num1 = 523;
   378     06DA  300B               	movlw	11
   379     06DB  1283               	bcf	3,5	;RP0=0, select bank0
   380     06DC  1303               	bcf	3,6	;RP1=0, select bank0
   381     06DD  00AE               	movwf	_num1
   382     06DE  3002               	movlw	2
   383     06DF  00AF               	movwf	_num1+1
   384     06E0                     l868:
   385                           
   386                           ;LCD_number_display.c: 38:     num2 = 238;
   387     06E0  30EE               	movlw	238
   388     06E1  00AC               	movwf	_num2
   389     06E2  3000               	movlw	0
   390     06E3  00AD               	movwf	_num2+1
   391     06E4                     l870:
   392                           
   393                           ;LCD_number_display.c: 39:     sum = num1 + num2;
   394     06E4  30F9               	movlw	249
   395     06E5  00AA               	movwf	_sum
   396     06E6  3002               	movlw	2
   397     06E7  00AB               	movwf	_sum+1
   398     06E8                     l872:
   399                           
   400                           ;LCD_number_display.c: 40:     equal = '=';
   401     06E8  303D               	movlw	61
   402     06E9  00B1               	movwf	_equal
   403     06EA                     l874:
   404                           
   405                           ;LCD_number_display.c: 41:     plus = '+';
   406     06EA  302B               	movlw	43
   407     06EB  00B0               	movwf	_plus
   408     06EC                     l876:
   409                           
   410                           ;LCD_number_display.c: 42:     LCD_command(0x80);
   411     06EC  3080               	movlw	128
   412     06ED  120A  118A  2679  120A  118A  	fcall	_LCD_command
   413     06F2                     l878:
   414                           
   415                           ;LCD_number_display.c: 43:     LCD_output(num1);
   416     06F2  300B               	movlw	11
   417     06F3  00FA               	movwf	LCD_output@n
   418     06F4  3002               	movlw	2
   419     06F5  00FB               	movwf	LCD_output@n+1
   420     06F6  120A  118A  271D  120A  118A  	fcall	_LCD_output
   421     06FB                     l880:
   422                           
   423                           ;LCD_number_display.c: 44:     LCD_data(plus);
   424     06FB  302B               	movlw	43
   425     06FC  120A  118A  264F  120A  118A  	fcall	_LCD_data
   426     0701                     l882:
   427                           
   428                           ;LCD_number_display.c: 45:     LCD_output(num2);
   429     0701  30EE               	movlw	238
   430     0702  00FA               	movwf	LCD_output@n
   431     0703  3000               	movlw	0
   432     0704  00FB               	movwf	LCD_output@n+1
   433     0705  120A  118A  271D  120A  118A  	fcall	_LCD_output
   434     070A                     l884:
   435                           
   436                           ;LCD_number_display.c: 46:     LCD_data(equal);
   437     070A  303D               	movlw	61
   438     070B  120A  118A  264F  120A  118A  	fcall	_LCD_data
   439     0710                     l886:
   440                           
   441                           ;LCD_number_display.c: 47:     LCD_output(sum);
   442     0710  30F9               	movlw	249
   443     0711  00FA               	movwf	LCD_output@n
   444     0712  3002               	movlw	2
   445     0713  00FB               	movwf	LCD_output@n+1
   446     0714  120A  118A  271D  120A  118A  	fcall	_LCD_output
   447     0719                     l35:	
   448                           ;LCD_number_display.c: 48:     while (1);
   449                           
   450     0719                     l36:
   451     0719  2F19               	goto	l35
   452     071A  120A  118A  2800   	ljmp	start
   453     071D                     __end_of_main:
   454                           
   455                           	psect	text1
   456     071D                     __ptext1:	
   457 ;; *************** function _LCD_output *****************
   458 ;; Defined at:
   459 ;;		line 76 in file "LCD_number_display.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;  n               2   10[COMMON] unsigned int 
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  j               2    1[BANK0 ] int 
   464 ;;  i               1    3[BANK0 ] unsigned char 
   465 ;;  result          1    0[BANK0 ] unsigned char 
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   475 ;;      Params:         2       0       0       0       0
   476 ;;      Locals:         0       4       0       0       0
   477 ;;      Temps:          2       0       0       0       0
   478 ;;      Totals:         4       4       0       0       0
   479 ;;Total ram usage:        8 bytes
   480 ;; Hardware stack levels used: 1
   481 ;; Hardware stack levels required when called: 1
   482 ;; This function calls:
   483 ;;		_LCD_data
   484 ;;		___bmul
   485 ;;		___lwdiv
   486 ;; This function is called by:
   487 ;;		_main
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491     071D                     _LCD_output:	
   492                           ;psect for function _LCD_output
   493                           
   494     071D                     l836:	
   495                           ;incstack = 0
   496                           ; Regs used in _LCD_output: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   497                           
   498                           
   499                           ;LCD_number_display.c: 77:     unsigned char result, i = 0;
   500     071D  1283               	bcf	3,5	;RP0=0, select bank0
   501     071E  1303               	bcf	3,6	;RP1=0, select bank0
   502     071F  01B5               	clrf	LCD_output@i
   503                           
   504                           ;LCD_number_display.c: 78:     while (n != 0) {
   505     0720  2F55               	goto	l846
   506     0721                     l838:
   507                           
   508                           ;LCD_number_display.c: 79:         result = n - ((n / 10)*10);
   509     0721  30F6               	movlw	246
   510     0722  00F7               	movwf	___bmul@multiplicand
   511     0723  087B               	movf	LCD_output@n+1,w
   512     0724  00F3               	movwf	___lwdiv@dividend+1
   513     0725  087A               	movf	LCD_output@n,w
   514     0726  00F2               	movwf	___lwdiv@dividend
   515     0727  300A               	movlw	10
   516     0728  00F0               	movwf	___lwdiv@divisor
   517     0729  3000               	movlw	0
   518     072A  00F1               	movwf	___lwdiv@divisor+1
   519     072B  120A  118A  2691  120A  118A  	fcall	___lwdiv
   520     0730  0870               	movf	?___lwdiv,w
   521     0731  120A  118A  2664  120A  118A  	fcall	___bmul
   522     0736  077A               	addwf	LCD_output@n,w
   523     0737  1283               	bcf	3,5	;RP0=0, select bank0
   524     0738  1303               	bcf	3,6	;RP1=0, select bank0
   525     0739  00B2               	movwf	LCD_output@result
   526     073A                     l840:
   527                           
   528                           ;LCD_number_display.c: 80:         num_arr[i] = result;
   529     073A  0835               	movf	LCD_output@i,w
   530     073B  3E20               	addlw	(low (_num_arr| 0))& (0+255)
   531     073C  0084               	movwf	4
   532     073D  0832               	movf	LCD_output@result,w
   533     073E  1383               	bcf	3,7	;select IRP bank0
   534     073F  0080               	movwf	0
   535     0740                     l842:
   536                           
   537                           ;LCD_number_display.c: 81:         i++;
   538     0740  3001               	movlw	1
   539     0741  00FF               	movwf	btemp+1
   540     0742  087F               	movf	btemp+1,w
   541     0743  07B5               	addwf	LCD_output@i,f
   542     0744                     l844:
   543                           
   544                           ;LCD_number_display.c: 82:         n /= 10;
   545     0744  300A               	movlw	10
   546     0745  00F0               	movwf	___lwdiv@divisor
   547     0746  3000               	movlw	0
   548     0747  00F1               	movwf	___lwdiv@divisor+1
   549     0748  087B               	movf	LCD_output@n+1,w
   550     0749  00F3               	movwf	___lwdiv@dividend+1
   551     074A  087A               	movf	LCD_output@n,w
   552     074B  00F2               	movwf	___lwdiv@dividend
   553     074C  120A  118A  2691  120A  118A  	fcall	___lwdiv
   554     0751  0871               	movf	?___lwdiv+1,w
   555     0752  00FB               	movwf	LCD_output@n+1
   556     0753  0870               	movf	?___lwdiv,w
   557     0754  00FA               	movwf	LCD_output@n
   558     0755                     l846:
   559                           
   560                           ;LCD_number_display.c: 78:     while (n != 0) {
   561     0755  087A               	movf	LCD_output@n,w
   562     0756  047B               	iorwf	LCD_output@n+1,w
   563     0757  1D03               	btfss	3,2
   564     0758  2F5A               	goto	u311
   565     0759  2F5B               	goto	u310
   566     075A                     u311:
   567     075A  2F21               	goto	l838
   568     075B                     u310:
   569     075B                     l848:
   570                           
   571                           ;LCD_number_display.c: 84:     num_arr[i] = '\0';
   572     075B  1283               	bcf	3,5	;RP0=0, select bank0
   573     075C  1303               	bcf	3,6	;RP1=0, select bank0
   574     075D  0835               	movf	LCD_output@i,w
   575     075E  3E20               	addlw	(low (_num_arr| 0))& (0+255)
   576     075F  0084               	movwf	4
   577     0760  1383               	bcf	3,7	;select IRP bank0
   578     0761  0180               	clrf	0
   579     0762                     l850:
   580                           
   581                           ;LCD_number_display.c: 85:     i -= 1;
   582     0762  3001               	movlw	1
   583     0763  02B5               	subwf	LCD_output@i,f
   584     0764                     l852:
   585                           
   586                           ;LCD_number_display.c: 86:     for (int j = i; j >= 0; j--) {
   587     0764  0835               	movf	LCD_output@i,w
   588     0765  00FC               	movwf	??_LCD_output
   589     0766  01FD               	clrf	??_LCD_output+1
   590     0767  087C               	movf	??_LCD_output,w
   591     0768  00B3               	movwf	LCD_output@j
   592     0769  087D               	movf	??_LCD_output+1,w
   593     076A  00B4               	movwf	LCD_output@j+1
   594     076B                     l854:
   595     076B  1FB4               	btfss	LCD_output@j+1,7
   596     076C  2F6E               	goto	u321
   597     076D  2F6F               	goto	u320
   598     076E                     u321:
   599     076E  2F70               	goto	l858
   600     076F                     u320:
   601     076F  2F84               	goto	l66
   602     0770                     l858:
   603                           
   604                           ;LCD_number_display.c: 87:         LCD_data(0x30 + num_arr[j]);
   605     0770  0833               	movf	LCD_output@j,w
   606     0771  3E20               	addlw	(low (_num_arr| 0))& (0+255)
   607     0772  0084               	movwf	4
   608     0773  1383               	bcf	3,7	;select IRP bank0
   609     0774  0800               	movf	0,w
   610     0775  3E30               	addlw	48
   611     0776  120A  118A  264F  120A  118A  	fcall	_LCD_data
   612     077B                     l860:
   613                           
   614                           ;LCD_number_display.c: 88:     }
   615     077B  30FF               	movlw	255
   616     077C  1283               	bcf	3,5	;RP0=0, select bank0
   617     077D  1303               	bcf	3,6	;RP1=0, select bank0
   618     077E  07B3               	addwf	LCD_output@j,f
   619     077F  1803               	skipnc
   620     0780  0AB4               	incf	LCD_output@j+1,f
   621     0781  30FF               	movlw	255
   622     0782  07B4               	addwf	LCD_output@j+1,f
   623     0783  2F6B               	goto	l854
   624     0784                     l66:
   625     0784  0008               	return
   626     0785                     __end_of_LCD_output:
   627                           
   628                           	psect	text2
   629     0691                     __ptext2:	
   630 ;; *************** function ___lwdiv *****************
   631 ;; Defined at:
   632 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;  divisor         2    0[COMMON] unsigned int 
   635 ;;  dividend        2    2[COMMON] unsigned int 
   636 ;; Auto vars:     Size  Location     Type
   637 ;;  quotient        2    4[COMMON] unsigned int 
   638 ;;  counter         1    6[COMMON] unsigned char 
   639 ;; Return value:  Size  Location     Type
   640 ;;                  2    0[COMMON] unsigned int 
   641 ;; Registers used:
   642 ;;		wreg, status,2, status,0, btemp+1
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   648 ;;      Params:         4       0       0       0       0
   649 ;;      Locals:         3       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0
   651 ;;      Totals:         7       0       0       0       0
   652 ;;Total ram usage:        7 bytes
   653 ;; Hardware stack levels used: 1
   654 ;; This function calls:
   655 ;;		Nothing
   656 ;; This function is called by:
   657 ;;		_LCD_output
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661     0691                     ___lwdiv:	
   662                           ;psect for function ___lwdiv
   663                           
   664     0691                     l786:	
   665                           ;incstack = 0
   666                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   667                           
   668     0691  01F4               	clrf	___lwdiv@quotient
   669     0692  01F5               	clrf	___lwdiv@quotient+1
   670     0693                     l788:
   671     0693  0870               	movf	___lwdiv@divisor,w
   672     0694  0471               	iorwf	___lwdiv@divisor+1,w
   673     0695  1903               	btfsc	3,2
   674     0696  2E98               	goto	u191
   675     0697  2E99               	goto	u190
   676     0698                     u191:
   677     0698  2ED0               	goto	l808
   678     0699                     u190:
   679     0699                     l790:
   680     0699  01F6               	clrf	___lwdiv@counter
   681     069A  0AF6               	incf	___lwdiv@counter,f
   682     069B  2EA7               	goto	l796
   683     069C                     l792:
   684     069C  3001               	movlw	1
   685     069D                     u205:
   686     069D  1003               	clrc
   687     069E  0DF0               	rlf	___lwdiv@divisor,f
   688     069F  0DF1               	rlf	___lwdiv@divisor+1,f
   689     06A0  3EFF               	addlw	-1
   690     06A1  1D03               	skipz
   691     06A2  2E9D               	goto	u205
   692     06A3                     l794:
   693     06A3  3001               	movlw	1
   694     06A4  00FF               	movwf	btemp+1
   695     06A5  087F               	movf	btemp+1,w
   696     06A6  07F6               	addwf	___lwdiv@counter,f
   697     06A7                     l796:
   698     06A7  1FF1               	btfss	___lwdiv@divisor+1,7
   699     06A8  2EAA               	goto	u211
   700     06A9  2EAB               	goto	u210
   701     06AA                     u211:
   702     06AA  2E9C               	goto	l792
   703     06AB                     u210:
   704     06AB                     l798:
   705     06AB  3001               	movlw	1
   706     06AC                     u225:
   707     06AC  1003               	clrc
   708     06AD  0DF4               	rlf	___lwdiv@quotient,f
   709     06AE  0DF5               	rlf	___lwdiv@quotient+1,f
   710     06AF  3EFF               	addlw	-1
   711     06B0  1D03               	skipz
   712     06B1  2EAC               	goto	u225
   713     06B2  0871               	movf	___lwdiv@divisor+1,w
   714     06B3  0273               	subwf	___lwdiv@dividend+1,w
   715     06B4  1D03               	skipz
   716     06B5  2EB8               	goto	u235
   717     06B6  0870               	movf	___lwdiv@divisor,w
   718     06B7  0272               	subwf	___lwdiv@dividend,w
   719     06B8                     u235:
   720     06B8  1C03               	skipc
   721     06B9  2EBB               	goto	u231
   722     06BA  2EBC               	goto	u230
   723     06BB                     u231:
   724     06BB  2EC3               	goto	l804
   725     06BC                     u230:
   726     06BC                     l800:
   727     06BC  0870               	movf	___lwdiv@divisor,w
   728     06BD  02F2               	subwf	___lwdiv@dividend,f
   729     06BE  0871               	movf	___lwdiv@divisor+1,w
   730     06BF  1C03               	skipc
   731     06C0  03F3               	decf	___lwdiv@dividend+1,f
   732     06C1  02F3               	subwf	___lwdiv@dividend+1,f
   733     06C2                     l802:
   734     06C2  1474               	bsf	___lwdiv@quotient,0
   735     06C3                     l804:
   736     06C3  3001               	movlw	1
   737     06C4                     u245:
   738     06C4  1003               	clrc
   739     06C5  0CF1               	rrf	___lwdiv@divisor+1,f
   740     06C6  0CF0               	rrf	___lwdiv@divisor,f
   741     06C7  3EFF               	addlw	-1
   742     06C8  1D03               	skipz
   743     06C9  2EC4               	goto	u245
   744     06CA                     l806:
   745     06CA  3001               	movlw	1
   746     06CB  02F6               	subwf	___lwdiv@counter,f
   747     06CC  1D03               	btfss	3,2
   748     06CD  2ECF               	goto	u251
   749     06CE  2ED0               	goto	u250
   750     06CF                     u251:
   751     06CF  2EAB               	goto	l798
   752     06D0                     u250:
   753     06D0                     l808:
   754     06D0  0875               	movf	___lwdiv@quotient+1,w
   755     06D1  00F1               	movwf	?___lwdiv+1
   756     06D2  0874               	movf	___lwdiv@quotient,w
   757     06D3  00F0               	movwf	?___lwdiv
   758     06D4                     l438:
   759     06D4  0008               	return
   760     06D5                     __end_of___lwdiv:
   761                           
   762                           	psect	text3
   763     0664                     __ptext3:	
   764 ;; *************** function ___bmul *****************
   765 ;; Defined at:
   766 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;  multiplier      1    wreg     unsigned char 
   769 ;;  multiplicand    1    7[COMMON] unsigned char 
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  multiplier      1    9[COMMON] unsigned char 
   772 ;;  product         1    8[COMMON] unsigned char 
   773 ;; Return value:  Size  Location     Type
   774 ;;                  1    wreg      unsigned char 
   775 ;; Registers used:
   776 ;;		wreg, status,2, status,0, btemp+1
   777 ;; Tracked objects:
   778 ;;		On entry : 0/0
   779 ;;		On exit  : 0/0
   780 ;;		Unchanged: 0/0
   781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   782 ;;      Params:         1       0       0       0       0
   783 ;;      Locals:         2       0       0       0       0
   784 ;;      Temps:          0       0       0       0       0
   785 ;;      Totals:         3       0       0       0       0
   786 ;;Total ram usage:        3 bytes
   787 ;; Hardware stack levels used: 1
   788 ;; This function calls:
   789 ;;		Nothing
   790 ;; This function is called by:
   791 ;;		_LCD_output
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795     0664                     ___bmul:	
   796                           ;psect for function ___bmul
   797                           
   798                           
   799                           ;incstack = 0
   800                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
   801                           ;___bmul@multiplier stored from wreg
   802     0664  00F9               	movwf	___bmul@multiplier
   803     0665                     l770:
   804     0665  01F8               	clrf	___bmul@product
   805     0666                     l772:
   806     0666  1C79               	btfss	___bmul@multiplier,0
   807     0667  2E69               	goto	u171
   808     0668  2E6A               	goto	u170
   809     0669                     u171:
   810     0669  2E6E               	goto	l776
   811     066A                     u170:
   812     066A                     l774:
   813     066A  0877               	movf	___bmul@multiplicand,w
   814     066B  00FF               	movwf	btemp+1
   815     066C  087F               	movf	btemp+1,w
   816     066D  07F8               	addwf	___bmul@product,f
   817     066E                     l776:
   818     066E  1003               	clrc
   819     066F  0DF7               	rlf	___bmul@multiplicand,f
   820     0670                     l778:
   821     0670  1003               	clrc
   822     0671  0CF9               	rrf	___bmul@multiplier,f
   823     0672                     l780:
   824     0672  0879               	movf	___bmul@multiplier,w
   825     0673  1D03               	btfss	3,2
   826     0674  2E76               	goto	u181
   827     0675  2E77               	goto	u180
   828     0676                     u181:
   829     0676  2E66               	goto	l772
   830     0677                     u180:
   831     0677                     l782:
   832     0677  0878               	movf	___bmul@product,w
   833     0678                     l184:
   834     0678  0008               	return
   835     0679                     __end_of___bmul:
   836                           
   837                           	psect	text4
   838     064F                     __ptext4:	
   839 ;; *************** function _LCD_data *****************
   840 ;; Defined at:
   841 ;;		line 105 in file "LCD_number_display.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;  hex             1    wreg     unsigned char 
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  hex             1    2[COMMON] unsigned char 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, status,2, status,0, btemp+1
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   855 ;;      Params:         0       0       0       0       0
   856 ;;      Locals:         1       0       0       0       0
   857 ;;      Temps:          2       0       0       0       0
   858 ;;      Totals:         3       0       0       0       0
   859 ;;Total ram usage:        3 bytes
   860 ;; Hardware stack levels used: 1
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		_main
   865 ;;		_LCD_output
   866 ;; This function uses a non-reentrant model
   867 ;;
   868                           
   869     064F                     _LCD_data:	
   870                           ;psect for function _LCD_data
   871                           
   872                           
   873                           ;incstack = 0
   874                           ; Regs used in _LCD_data: [wreg+status,2+status,0+btemp+1]
   875                           ;LCD_data@hex stored from wreg
   876     064F  00F2               	movwf	LCD_data@hex
   877     0650                     l760:
   878                           
   879                           ;LCD_number_display.c: 106:     PORTC |= 0x08;
   880     0650  1283               	bcf	3,5	;RP0=0, select bank0
   881     0651  1303               	bcf	3,6	;RP1=0, select bank0
   882     0652  1587               	bsf	7,3	;volatile
   883     0653                     l762:
   884                           
   885                           ;LCD_number_display.c: 107:     PORTD = hex;
   886     0653  0872               	movf	LCD_data@hex,w
   887     0654  0088               	movwf	8	;volatile
   888     0655                     l764:
   889                           
   890                           ;LCD_number_display.c: 108:     PORTC |= 0x01;
   891     0655  1407               	bsf	7,0	;volatile
   892     0656                     l766:
   893                           
   894                           ;LCD_number_display.c: 109:     PORTC &= ~0x01;
   895     0656  30FE               	movlw	254
   896     0657  00FF               	movwf	btemp+1
   897     0658  087F               	movf	btemp+1,w
   898     0659  0587               	andwf	7,f	;volatile
   899     065A                     l768:
   900                           
   901                           ;LCD_number_display.c: 110:     _delay((unsigned long)((50)*(6000000/4000.0)));
   902     065A  3062               	movlw	98
   903     065B  00F1               	movwf	??_LCD_data+1
   904     065C  3065               	movlw	101
   905     065D  00F0               	movwf	??_LCD_data
   906     065E                     u337:
   907     065E  0BF0               	decfsz	??_LCD_data,f
   908     065F  2E5E               	goto	u337
   909     0660  0BF1               	decfsz	??_LCD_data+1,f
   910     0661  2E5E               	goto	u337
   911     0662  2E63               	nop2
   912     0663                     l72:
   913     0663  0008               	return
   914     0664                     __end_of_LCD_data:
   915                           
   916                           	psect	text5
   917     0785                     __ptext5:	
   918 ;; *************** function _LCD_PIC_init *****************
   919 ;; Defined at:
   920 ;;		line 52 in file "LCD_number_display.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;		None
   923 ;; Auto vars:     Size  Location     Type
   924 ;;		None
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   934 ;;      Params:         0       0       0       0       0
   935 ;;      Locals:         0       0       0       0       0
   936 ;;      Temps:          2       0       0       0       0
   937 ;;      Totals:         2       0       0       0       0
   938 ;;Total ram usage:        2 bytes
   939 ;; Hardware stack levels used: 1
   940 ;; Hardware stack levels required when called: 1
   941 ;; This function calls:
   942 ;;		_LCD_command
   943 ;; This function is called by:
   944 ;;		_main
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948     0785                     _LCD_PIC_init:	
   949                           ;psect for function _LCD_PIC_init
   950                           
   951     0785                     l812:	
   952                           ;incstack = 0
   953                           ; Regs used in _LCD_PIC_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   954                           
   955                           
   956                           ;LCD_number_display.c: 54:     TRISC = 0x00;
   957     0785  1683               	bsf	3,5	;RP0=1, select bank1
   958     0786  1303               	bcf	3,6	;RP1=0, select bank1
   959     0787  0187               	clrf	7	;volatile
   960                           
   961                           ;LCD_number_display.c: 55:     TRISD = 0x00;
   962     0788  0188               	clrf	8	;volatile
   963     0789                     l814:
   964                           
   965                           ;LCD_number_display.c: 57:     LCD_command(0x30);
   966     0789  3030               	movlw	48
   967     078A  120A  118A  2679  120A  118A  	fcall	_LCD_command
   968     078F                     l816:
   969                           
   970                           ;LCD_number_display.c: 58:     _delay((unsigned long)((50)*(6000000/4000.0)));
   971     078F  3062               	movlw	98
   972     0790  00F4               	movwf	??_LCD_PIC_init+1
   973     0791  3065               	movlw	101
   974     0792  00F3               	movwf	??_LCD_PIC_init
   975     0793                     u347:
   976     0793  0BF3               	decfsz	??_LCD_PIC_init,f
   977     0794  2F93               	goto	u347
   978     0795  0BF4               	decfsz	??_LCD_PIC_init+1,f
   979     0796  2F93               	goto	u347
   980     0797  2F98               	nop2
   981     0798                     l818:
   982                           
   983                           ;LCD_number_display.c: 59:     LCD_command(0x30);
   984     0798  3030               	movlw	48
   985     0799  120A  118A  2679  120A  118A  	fcall	_LCD_command
   986     079E                     l820:
   987                           
   988                           ;LCD_number_display.c: 60:     _delay((unsigned long)((50)*(6000000/4000.0)));
   989     079E  3062               	movlw	98
   990     079F  00F4               	movwf	??_LCD_PIC_init+1
   991     07A0  3065               	movlw	101
   992     07A1  00F3               	movwf	??_LCD_PIC_init
   993     07A2                     u357:
   994     07A2  0BF3               	decfsz	??_LCD_PIC_init,f
   995     07A3  2FA2               	goto	u357
   996     07A4  0BF4               	decfsz	??_LCD_PIC_init+1,f
   997     07A5  2FA2               	goto	u357
   998     07A6  2FA7               	nop2
   999     07A7                     l822:
  1000                           
  1001                           ;LCD_number_display.c: 61:     LCD_command(0x30);
  1002     07A7  3030               	movlw	48
  1003     07A8  120A  118A  2679  120A  118A  	fcall	_LCD_command
  1004     07AD                     l824:
  1005                           
  1006                           ;LCD_number_display.c: 62:     _delay((unsigned long)((50)*(6000000/4000.0)));
  1007     07AD  3062               	movlw	98
  1008     07AE  00F4               	movwf	??_LCD_PIC_init+1
  1009     07AF  3065               	movlw	101
  1010     07B0  00F3               	movwf	??_LCD_PIC_init
  1011     07B1                     u367:
  1012     07B1  0BF3               	decfsz	??_LCD_PIC_init,f
  1013     07B2  2FB1               	goto	u367
  1014     07B3  0BF4               	decfsz	??_LCD_PIC_init+1,f
  1015     07B4  2FB1               	goto	u367
  1016     07B5  2FB6               	nop2
  1017     07B6                     l826:
  1018                           
  1019                           ;LCD_number_display.c: 63:     LCD_command(0x38);
  1020     07B6  3038               	movlw	56
  1021     07B7  120A  118A  2679  120A  118A  	fcall	_LCD_command
  1022     07BC                     l41:	
  1023                           ;LCD_number_display.c: 64:     while (RD7 == 1);
  1024                           
  1025     07BC  1283               	bcf	3,5	;RP0=0, select bank0
  1026     07BD  1303               	bcf	3,6	;RP1=0, select bank0
  1027     07BE  1B88               	btfsc	8,7	;volatile
  1028     07BF  2FC1               	goto	u261
  1029     07C0  2FC2               	goto	u260
  1030     07C1                     u261:
  1031     07C1  2FBC               	goto	l41
  1032     07C2                     u260:
  1033     07C2                     l828:
  1034                           
  1035                           ;LCD_number_display.c: 65:     LCD_command(0x08);
  1036     07C2  3008               	movlw	8
  1037     07C3  120A  118A  2679  120A  118A  	fcall	_LCD_command
  1038     07C8                     l44:	
  1039                           ;LCD_number_display.c: 66:     while (RD7 == 1);
  1040                           
  1041     07C8  1283               	bcf	3,5	;RP0=0, select bank0
  1042     07C9  1303               	bcf	3,6	;RP1=0, select bank0
  1043     07CA  1B88               	btfsc	8,7	;volatile
  1044     07CB  2FCD               	goto	u271
  1045     07CC  2FCE               	goto	u270
  1046     07CD                     u271:
  1047     07CD  2FC8               	goto	l44
  1048     07CE                     u270:
  1049     07CE                     l830:
  1050                           
  1051                           ;LCD_number_display.c: 67:     LCD_command(0x01);
  1052     07CE  3001               	movlw	1
  1053     07CF  120A  118A  2679  120A  118A  	fcall	_LCD_command
  1054     07D4                     l47:	
  1055                           ;LCD_number_display.c: 68:     while (RD7 == 1);
  1056                           
  1057     07D4  1283               	bcf	3,5	;RP0=0, select bank0
  1058     07D5  1303               	bcf	3,6	;RP1=0, select bank0
  1059     07D6  1B88               	btfsc	8,7	;volatile
  1060     07D7  2FD9               	goto	u281
  1061     07D8  2FDA               	goto	u280
  1062     07D9                     u281:
  1063     07D9  2FD4               	goto	l47
  1064     07DA                     u280:
  1065     07DA                     l832:
  1066                           
  1067                           ;LCD_number_display.c: 69:     LCD_command(0x06);
  1068     07DA  3006               	movlw	6
  1069     07DB  120A  118A  2679  120A  118A  	fcall	_LCD_command
  1070     07E0                     l50:	
  1071                           ;LCD_number_display.c: 70:     while (RD7 == 1);
  1072                           
  1073     07E0  1283               	bcf	3,5	;RP0=0, select bank0
  1074     07E1  1303               	bcf	3,6	;RP1=0, select bank0
  1075     07E2  1B88               	btfsc	8,7	;volatile
  1076     07E3  2FE5               	goto	u291
  1077     07E4  2FE6               	goto	u290
  1078     07E5                     u291:
  1079     07E5  2FE0               	goto	l50
  1080     07E6                     u290:
  1081     07E6                     l834:
  1082                           
  1083                           ;LCD_number_display.c: 71:     LCD_command(0x0E);
  1084     07E6  300E               	movlw	14
  1085     07E7  120A  118A  2679  120A  118A  	fcall	_LCD_command
  1086     07EC                     l53:	
  1087                           ;LCD_number_display.c: 72:     while (RD7 == 1);
  1088                           
  1089     07EC  1283               	bcf	3,5	;RP0=0, select bank0
  1090     07ED  1303               	bcf	3,6	;RP1=0, select bank0
  1091     07EE  1B88               	btfsc	8,7	;volatile
  1092     07EF  2FF1               	goto	u301
  1093     07F0  2FF2               	goto	u300
  1094     07F1                     u301:
  1095     07F1  2FEC               	goto	l53
  1096     07F2                     u300:
  1097     07F2                     l56:
  1098     07F2  0008               	return
  1099     07F3                     __end_of_LCD_PIC_init:
  1100                           
  1101                           	psect	text6
  1102     0679                     __ptext6:	
  1103 ;; *************** function _LCD_command *****************
  1104 ;; Defined at:
  1105 ;;		line 94 in file "LCD_number_display.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;  hex             1    wreg     unsigned char 
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  hex             1    2[COMMON] unsigned char 
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      void 
  1112 ;; Registers used:
  1113 ;;		wreg, status,2, status,0, btemp+1
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1119 ;;      Params:         0       0       0       0       0
  1120 ;;      Locals:         1       0       0       0       0
  1121 ;;      Temps:          2       0       0       0       0
  1122 ;;      Totals:         3       0       0       0       0
  1123 ;;Total ram usage:        3 bytes
  1124 ;; Hardware stack levels used: 1
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_main
  1129 ;;		_LCD_PIC_init
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133     0679                     _LCD_command:	
  1134                           ;psect for function _LCD_command
  1135                           
  1136                           
  1137                           ;incstack = 0
  1138                           ; Regs used in _LCD_command: [wreg+status,2+status,0+btemp+1]
  1139                           ;LCD_command@hex stored from wreg
  1140     0679  00F2               	movwf	LCD_command@hex
  1141     067A                     l752:
  1142                           
  1143                           ;LCD_number_display.c: 95:     PORTC &= 0xF7;
  1144     067A  30F7               	movlw	247
  1145     067B  00FF               	movwf	btemp+1
  1146     067C  087F               	movf	btemp+1,w
  1147     067D  1283               	bcf	3,5	;RP0=0, select bank0
  1148     067E  1303               	bcf	3,6	;RP1=0, select bank0
  1149     067F  0587               	andwf	7,f	;volatile
  1150     0680                     l754:
  1151                           
  1152                           ;LCD_number_display.c: 96:     PORTD = hex;
  1153     0680  0872               	movf	LCD_command@hex,w
  1154     0681  0088               	movwf	8	;volatile
  1155     0682                     l756:
  1156                           
  1157                           ;LCD_number_display.c: 97:     PORTC |= 0x01;
  1158     0682  1407               	bsf	7,0	;volatile
  1159     0683                     l758:
  1160                           
  1161                           ;LCD_number_display.c: 98:     PORTC &= ~0x01;
  1162     0683  30FE               	movlw	254
  1163     0684  00FF               	movwf	btemp+1
  1164     0685  087F               	movf	btemp+1,w
  1165     0686  0587               	andwf	7,f	;volatile
  1166                           
  1167                           ;LCD_number_display.c: 99:     _delay((unsigned long)((50)*(6000000/4000.0)));
  1168     0687  3062               	movlw	98
  1169     0688  00F1               	movwf	??_LCD_command+1
  1170     0689  3065               	movlw	101
  1171     068A  00F0               	movwf	??_LCD_command
  1172     068B                     u377:
  1173     068B  0BF0               	decfsz	??_LCD_command,f
  1174     068C  2E8B               	goto	u377
  1175     068D  0BF1               	decfsz	??_LCD_command+1,f
  1176     068E  2E8B               	goto	u377
  1177     068F  2E90               	nop2
  1178     0690                     l69:
  1179     0690  0008               	return
  1180     0691                     __end_of_LCD_command:
  1181     007E                     btemp	set	126	;btemp
  1182     007E                     wtemp0	set	126
  1183                           
  1184                           	psect	config
  1185                           
  1186                           ;Config register CONFIG @ 0x2007
  1187                           ;	Oscillator Selection bits
  1188                           ;	FOSC = EXTRC, RC oscillator
  1189                           ;	Watchdog Timer Enable bit
  1190                           ;	WDTE = OFF, WDT disabled
  1191                           ;	Power-up Timer Enable bit
  1192                           ;	PWRTE = OFF, PWRT disabled
  1193                           ;	Brown-out Reset Enable bit
  1194                           ;	BOREN = OFF, BOR disabled
  1195                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1196                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1197                           ;	Data EEPROM Memory Code Protection bit
  1198                           ;	CPD = OFF, Data EEPROM code protection off
  1199                           ;	Flash Program Memory Write Enable bits
  1200                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1201                           ;	In-Circuit Debugger Mode bit
  1202                           ;	DEBUG = 0x1, unprogrammed default
  1203                           ;	Flash Program Memory Code Protection bit
  1204                           ;	CP = OFF, Code protection off
  1205     2007                     	org	8199
  1206     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      4      22
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LCD_output
    _LCD_output->___bmul
    ___bmul->___lwdiv
    _LCD_PIC_init->_LCD_command

Critical Paths under _main in BANK0

    _main->_LCD_output

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1199
                       _LCD_PIC_init
                        _LCD_command
                           _LCD_data
                         _LCD_output
 ---------------------------------------------------------------------------------
 (1) _LCD_output                                           8     6      2    1133
                                             10 COMMON     4     2      2
                                              0 BANK0      4     4      0
                           _LCD_data
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     168
                                              7 COMMON     3     2      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCD_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_PIC_init                                         2     2      0      22
                                              3 COMMON     2     2      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (1) _LCD_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_PIC_init
     _LCD_command
   _LCD_command
   _LCD_data
   _LCD_output
     _LCD_data
     ___bmul
       ___lwdiv (ARG)
     ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      24       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4      16       5       27.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      24      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sun Dec 31 20:41:48 2023

         ___bmul@product 0078                       l41 07BC                       l50 07E0  
                     l35 0719                       l44 07C8                       l36 0719  
                     l53 07EC                       l47 07D4                       l56 07F2  
                     l72 0663                       l66 0784                       l69 0690  
                     fsr 0004                      l184 0678                      l438 06D4  
                    l800 06BC                      l802 06C2                      l820 079E  
                    l812 0785                      l804 06C3                      l830 07CE  
                    l822 07A7                      l814 0789                      l806 06CA  
                    l752 067A                      l832 07DA                      l824 07AD  
                    l816 078F                      l760 0650                      l808 06D0  
                    l840 073A                      l754 0680                      l834 07E6  
                    l826 07B6                      l818 0798                      l762 0653  
                    l770 0665                      l850 0762                      l842 0740  
                    l756 0682                      l828 07C2                      l764 0655  
                    l780 0672                      l772 0666                      l860 077B  
                    l852 0764                      l844 0744                      l836 071D  
                    l758 0683                      l766 0656                      l782 0677  
                    l774 066A                      l790 0699                      l854 076B  
                    l838 0721                      l846 0755                      l870 06E4  
                    l768 065A                      l776 066E                      l792 069C  
                    l848 075B                      l880 06FB                      l872 06E8  
                    l864 06D5                      l778 0670                      l794 06A3  
                    l786 0691                      l858 0770                      l882 0701  
                    l874 06EA                      l866 06DA                      l796 06A7  
                    l788 0693                      l884 070A                      l876 06EC  
                    l868 06E0                      l798 06AB                      l886 0710  
                    l878 06F2                      _RD7 0047                      u210 06AB  
                    u211 06AA                      u300 07F2                      u301 07F1  
                    u205 069D                      u230 06BC                      u310 075B  
                    u231 06BB                      u311 075A                      u320 076F  
                    u225 06AC                      u321 076E                      u170 066A  
                    u250 06D0                      u171 0669                      u251 06CF  
                    u235 06B8                      u260 07C2                      u180 0677  
                    u261 07C1                      u181 0676                      u245 06C4  
                    u270 07CE                      u190 0699                      u271 07CD  
                    u191 0698                      u280 07DA                      u281 07D9  
                    u337 065E                      u290 07E6                      u291 07E5  
                    u347 0793                      u357 07A2                      u367 07B1  
                    u377 068B                      fsr0 0004                      _sum 002A  
                    indf 0000              ?_LCD_output 007A             ?_LCD_command 0070  
         ??_LCD_PIC_init 0073                     _main 06D5                     _num1 002E  
                   _num2 002C                     _plus 0030                     btemp 007E  
                   start 0000        ___bmul@multiplier 0079         __end_of_LCD_data 0664  
                  ?_main 0070          __end_of___lwdiv 06D5                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  _equal 0031              LCD_data@hex 0072                    status 0003  
                  wtemp0 007E          __initialization 07F3             __end_of_main 071D  
                 ??_main 007E              LCD_output@i 0035              LCD_output@j 0033  
            LCD_output@n 007A                   ___bmul 0664                ??___lwdiv 0074  
   __end_of_LCD_PIC_init 07F3         LCD_output@result 0032  __end_of__initialization 07FC  
              ?_LCD_data 0070      ___bmul@multiplicand 0077           __pcstackCOMMON 0070  
           ??_LCD_output 007C               __pbssBANK0 0020               ??_LCD_data 0070  
             __pmaintext 06D5                  ?___bmul 0077       __end_of_LCD_output 0785  
                ___lwdiv 0691                  __ptext1 071D                  __ptext2 0691  
                __ptext3 0664                  __ptext4 064F                  __ptext5 0785  
                __ptext6 0679                  _num_arr 0020                  clrloop0 0648  
   end_of_initialization 07FC             _LCD_PIC_init 0785           __end_of___bmul 0679  
    start_initialization 07F3            ??_LCD_command 0070                 ??___bmul 0078  
              ___latbits 0002            __pcstackBANK0 0032      __end_of_LCD_command 0691  
       ___lwdiv@dividend 0072                 ?___lwdiv 0070         ___lwdiv@quotient 0074  
               _LCD_data 064F                clear_ram0 0647              _LCD_command 0679  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0076               _LCD_output 071D  
          ?_LCD_PIC_init 0070           LCD_command@hex 0072  
